{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","useStyles","makeStyles","theme","paper","position","top","left","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","todo","input","setInput","className","Modal","onClose","e","FormControl","InputLabel","Input","value","onChange","event","target","Button","type","disabled","onClick","preventDefault","collection","doc","id","set","merge","List","ListItem","ListItemText","primary","secondary","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","variant","color","console","log","add","timestamp","FieldValue","serverTimestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.827be5b0.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyCf_zu_hux4pa31V-s3Cqb8DaX2B5GDDr0\",\r\n  authDomain: \"todo-app-saim.firebaseapp.com\",\r\n  databaseURL: \"https://todo-app-saim.firebaseio.com\",\r\n  projectId: \"todo-app-saim\",\r\n  storageBucket: \"todo-app-saim.appspot.com\",\r\n  messagingSenderId: \"610061542234\",\r\n  appId: \"1:610061542234:web:250218142bc4f5e9d58963\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport { db };","import React ,{useState} from 'react'\r\nimport './Todo.css'\r\nimport {List, ListItem, ListItemText, Button, FormControl, InputLabel, Input} from '@material-ui/core'\r\nimport {db} from \"./firebase\";\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport {Modal} from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    top: '30%' ,\r\n    left: '25%',\r\n    width: 300,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  \r\n}));\r\n\r\nfunction Todo(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [input, setInput] = useState(props.todo.todo);\r\n\r\n  const handleOpen = (event) =>{\r\n    event.preventDefault();\r\n    setOpen(true);\r\n    setInput(props.todo.todo);\r\n  }\r\n\r\n  const updateTodo = (event) => {\r\n    event.preventDefault();\r\n    \r\n    db.collection('todos').doc(props.todo.id).set({\r\n      todo: input\r\n    }, {merge: true})\r\n    setOpen(false);\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={e => setOpen(false)}\r\n      >\r\n        <div className={classes.paper}>\r\n          <form className='todoModal__form'>\r\n            <FormControl>\r\n              <InputLabel>Edit todo</InputLabel>\r\n              <Input value={input} onChange={event => setInput(event.target.value)}/>\r\n            </FormControl>\r\n            <Button type=\"submit\" disabled={!input} onClick= {updateTodo}>Update</Button>\r\n          </form>\r\n        </div>\r\n\r\n      </Modal>\r\n\r\n      <List className=\"todo__info\">\r\n        <ListItem>\r\n          <ListItemText primary={props.todo.todo} secondary=\"No deadline\"/>\r\n        </ListItem>\r\n        <Button onClick={handleOpen}>Edit</Button>\r\n\r\n        <DeleteForeverIcon className='todo__delete' onClick = { event => db.collection('todos').doc(props.todo.id).delete()} />\r\n      </List>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todo;\r\n","import React , { useState, useEffect } from 'react';\nimport './App.css';\nimport {Button, FormControl, InputLabel, Input} from '@material-ui/core'\nimport Todo from './Todo'\nimport {db} from './firebase'\nimport firebase from \"firebase\";\n\nfunction App() {\n\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect( () => {\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({id: doc.id , todo: doc.data().todo})))\n    })\n  }, []); \n\n  const addTodo = (event) => {\n    console.log('Button is clicked!')\n    event.preventDefault();\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setTodos([...todos, input ]); \n    setInput('')\n  }\n\n  return (\n    <center>\n    <div className=\"app\">\n      <h2>Todo App </h2>\n      <form className='app__form'>\n        <FormControl>\n          <InputLabel>Write a todo</InputLabel>\n          <Input value={input} onChange={event => setInput(event.target.value)}/>\n        </FormControl>\n\n        <Button disabled={!input} variant='contained' color='primary' type='submit'onClick={addTodo}>\n          Add Item\n        </Button>\n\n        <ul className='todo_items'>\n          {todos.map( todo => (\n            <Todo todo={todo}/>\n          ))}\n        </ul>\n      </form>\n      \n    </div>\n    </center>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}